from kivy.config import Config
Config.set("graphics","resizable",0)
from kivymd.app import MDApp
from kivy.lang import Builder
from kivy.core.window import Window
from kivymd.uix.gridlayout import MDGridLayout
from kivy.clock import Clock
import random
Window.size=(350,600)

P=0
EMPTY_SQUARE = 0

class Pole(MDGridLayout):
    def replace(self,x,y):
        global P

        if app.fix == app.correct_board:
            app.switch_screen('result')
            old = app.config.get("Top","rec")
            app.screen.ids.r_time.text = app.time
            if app.time < old:
                app.config.set("Top","rec",app.time)
                app.config.write()
                app.screen.ids.m_rec.text=app.time



        text_x = self.children[x]
        text_y = self.children[y]
        self.children[x] = text_y
        self.children[y] = text_x
        P = y
        app.fix[x], app.fix[y] = app.fix[y], app.fix[x]

    def sdvig(self, x):
        global P
        if (x == 'up'):
            if P - 4 >= 0:
                self.replace(P, P - 4)

        if (x == 'down'):
            if P + 4 <= 15:
                self.replace(P, P + 4)
        if (x == 'right'):
            if (P + 1) % 4 != 0:
                self.replace(P, P + 1)
        if (x == 'left'):
            if P % 4 != 0:
                self.replace(P, P - 1)

    def on_touch_down(self, touch):
        touch.ud["x"] = touch.x
        touch.ud["y"] = touch.y

    def on_touch_up(self, touch):
        x = touch.ud["x"] - touch.x
        y = touch.ud["y"] - touch.y
        if (abs(x) - abs(y) > 0):
            if (x > 0):
                self.sdvig("left")
            else:
                self.sdvig("right")
        else:
            if y > 0:
                self.sdvig("down")
            else:
                self.sdvig("up")

class GameApp(MDApp):

    def get_inv_count(self):
        invers = 0
        invers_board = self.ORDER[:]
        invers_board.remove(EMPTY_SQUARE)
        for i in range(len(invers_board)):
            first = invers_board[i]
            for j in range(i + 1, len(invers_board)):
                second = invers_board[j]
                if first > second:
                    invers += 1
        return invers

    def is_solvable(self):
        num_inversions = self.get_inv_count()
        if num_inversions % 2 != 0:
            return num_inversions % 2 == 0
        else:
            empty_square_row = 4 - (self.ORDER.index(EMPTY_SQUARE) // 4)
            if empty_square_row % 2 == 0:
                return num_inversions % 2 != 0
            else:
                return num_inversions % 2 == 0

    def build(self):
        self.screen = Builder.load_file('ui.kv')
        self.time = '00:00'
        self.tick = 0
        self.i_timer = Clock.schedule_interval(callback=self.timer, timeout=1)
        self.ORDER = list(range(1, 17))
        self.correct_board = self.ORDER[:]
        return self.screen

    def build_config(self, config):
        config.setdefaults(
            'Top', {
                'rec':'00:00'
            }
        )
    def GigaRandom(self,a):
        a.remove(EMPTY_SQUARE)
        for i in range(14):
            self.screen.ids[f'm{i}'].text = str(a[i])

        self.screen.ids.m15.text = ""
        self.fix.append(15)
        self.fix.append(0)
        self.fix.reverse()


    def new_game(self):
        self.tick = 0
        app.screen.ids.timer.text = '00:00'
        self.i_timer = Clock.schedule_interval(callback=self.timer, timeout=1)
        self.ORDER = list(range(0, 15))
        self.correct_board = self.ORDER[:]
        self.correct_board.remove(0)
        self.correct_board.append(0)
        self.correct_board.append(15)
        self.correct_board.reverse()
        random.shuffle(self.ORDER)
        while not self.is_solvable():
            random.shuffle(self.ORDER)
        self.fix = self.ORDER[:]
        self.GigaRandom(self.fix)

    def switch_screen(self, screen):

        self.screen.current = screen
        self.i_timer.cancel()
        if screen == 'game':
            self.i_timer.cancel()
            self.new_game()

    def timer(self,cloak):
        self.tick += 1
        min = self.tick // 60
        sec = self.tick - min * 60
        self.time = f'{min if min > 9 else "0" + str(min)}:{sec if sec > 9 else "0" + str(sec)}'
        app.screen.ids.timer.text = self.time


app = GameApp()
app.run()


















<Pole@MDGridLayout>


MDScreenManager:
    id:sm
    MDScreen:
        name:"main"
        MDAnchorLayout:
            anchor_x: 'center'
            anchor_y: 'center'
            MDBoxLayout:
                orientation:'vertical'
                size_hint:(.75,None)
                spacing:20
                MDBoxLayout:
                    padding:[50,0,0,0]
                    MDLabel:
                        text:'Рекорд'
                    MDLabel:
                        id:m_rec
                        text:app.config.get("Top","rec")
                MDRectangleFlatButton:
                    text:'Новая игра'
                    size_hint_x:1
                    on_press:app.switch_screen("game")
    MDScreen:
        name:'game'
        MDBoxLayout:
            orientation:"vertical"
            MDTopAppBar:
                title:"Пятнашки"
            MDBoxLayout:
                orientation:"vertical"
                MDBoxLayout:
                    padding:[150,0,0,0]
                    MDLabel:
                        id:timer
                        text:'00:00'

                AnchorLayout:
                    anchor_y:"center"
                    anchor_x:"center"
                    padding:[0,0,0,40]


                    Pole:
                        padding:50
                        size_hint_y:None
                        size_hint_x:None
                        width:root.width
                        height:self.width
                        cols:4
                        rows:4

                        MDRectangleFlatIconButton:
                            id:m0
                            size_hint:[1,1]
                            text:"1"
                        MDRectangleFlatIconButton:
                            id:m1
                            size_hint:[1,1]
                            text:"2"
                        MDRectangleFlatIconButton:
                            id:m2
                            size_hint:[1,1]
                            text:"3"
                        MDRectangleFlatIconButton:
                            id:m3
                            size_hint:[1,1]
                            text:"4"
                        MDRectangleFlatIconButton:
                            id:m4
                            size_hint:[1,1]
                            text:"5"
                        MDRectangleFlatIconButton:
                            id:m5
                            size_hint:[1,1]
                            text:"6"
                        MDRectangleFlatIconButton:
                            id:m6
                            size_hint:[1,1]
                            text:"7"
                        MDRectangleFlatIconButton:
                            id:m7
                            size_hint:[1,1]
                            text:"8"
                        MDRectangleFlatIconButton:
                            id:m8
                            size_hint:[1,1]
                            text:"9"
                        MDRectangleFlatIconButton:
                            id:m9
                            size_hint:[1,1]
                            text:"10"
                        MDRectangleFlatIconButton:
                            id:m10
                            size_hint:[1,1]
                            text:"11"
                        MDRectangleFlatIconButton:
                            id:m11
                            size_hint:[1,1]
                            text:"12"
                        MDRectangleFlatIconButton:
                            id:m12
                            size_hint:[1,1]
                            text:"13"
                        MDRectangleFlatIconButton:
                            id:m13
                            size_hint:[1,1]
                            text:"14"
                        MDRectangleFlatIconButton:
                            id:m14
                            size_hint:[1,1]
                            text:"15"
                        MDRectangleFlatIconButton:
                            id:m15
                            size_hint:[1,1]
                            text:""
    MDScreen:
        name:'result'
        MDBoxLayout:
            orientation:"vertical"
            MDBoxLayout:
                height:self.minimum_height
                padding:[60,0,0,0]
                MDLabel:
                    text:"Результат"
                MDLabel:
                    id:r_time
                    text:""
                MDRectangleFlatButton:
                    text:"В главное меню"
                    on_press:app.switch_screen("main")